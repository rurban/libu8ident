--- doc/P2528R0.md	2022-01-22 15:03:34.374093280 +0100
+++ doc/n2916.md	2022-02-12 14:02:29.268820448 +0100
@@ -1,10 +1,9 @@
-    C++ Identifier Security using Unicode Standard Annex 39
+    n2916 - C Identifier Security using Unicode Standard Annex 39
 
-    Document #: P2538R0
-    Date:       2022-01-22
-    Project:    Programming Language C++
-    Audience:   EWG
-                CWG
+    Date:       2022-02-12
+    Project:    Programming Language C
+    Audience:   WG14
+                SG-16
     Reply-to:   Reini Urban <reini.urban@gmail.com>
 
 1 Abstract
@@ -12,7 +11,7 @@
 
 In response to [P1949R7](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p1949r7.html)
 
-Adopt Unicode Annex 39 "Unicode Security Mechanisms" as part of C++23.
+Adopt Unicode Annex 39 "Unicode Security Mechanisms" as part of C26.
 
 * Comply to a variant of [TR39#5.2](https://www.unicode.org/reports/tr39/#Restriction_Level_Detection)
   Mixed-Scripts Moderately Restrictive profile, but allow some Greek letters without
@@ -33,20 +32,27 @@
   Excluded scripts can be added to the allowed set of scripts per source file.
 
 Recommend binutils/linker ABI identifier rules: names are UTF-8,
-add add identifier checks. E.g. `readelf -L -Ue`.
+add identifier checks. E.g. `readelf -L -Ue`.
 
-In addition adopt this proposal as a Defect Report against C++20 and
+In addition adopt this proposal as a Defect Report against C11 and
 earlier. The author provides the
 [libu8ident](https://github.com/rurban/libu8ident/) library (Apache 2
 licensed) and its generated tables to all implementors.
 
-TR39 checks could be weakened to warnings, TR31 violations not. But note that
+TR39 checks could be implemented as warnings, TR31 violations not. But note that
 even TR31 has bugs still, to be fixed in the next Unicode version.
 
 2 Changes
 =========
 
-None
+From 2022-01-22:
+
+* Rename C23 to C26, it's too late for C23.
+* Disallow non-confusable `Technical` U+1C0..U+1C3
+* Fix a lot of not Allowed ID_Start ranges. safec26_start_list
+  from 355 ranges, 115 singles, 99350 codepoints
+  to 243 ranges, 93 singles, 95986 codepoints
+* Inserted chapter [4 Motivation](#motivation) with links to spoofs.
 
 3 Summary
 =========
@@ -73,27 +79,41 @@
 as they appeared in browsers and email. Also names in C object files:
 linkers, .def files, ffi's.
 
-Implementing TR39 mixed script detection per document (C++ Header and
+Implementing TR39 mixed script detection per document (C Header and
 Source file) forbids insecure mixes of Greek with Cyrillic, dangerous
 Arabic RTL bidi attacks and most confusables. You can still write in
 your language, but then only in commonly written languages, and not
 mixed with others. Identifiers are still identifiable.
 
 The question remains if TR39 security violations should be ill-formed
-(throw an compilation error), or if TR31 violations should throw an
-error or just a warning. Since we do have the `-std=c23++` option, and
-the issues are security relevant, an error seems to be best.
-Implementations might choose to go for warnings on not-valid scripts,
-mixed scripts, or invalid sequences of combining marks though for fear
-of political backlash, even if the Unicode Standard recommended for
-decades that identifiers should stay identifiable. If the standard
-committee opts for the insecure option, they should rather rename
-identifiers to symbols then. This would be the political solution.
+(throw an compilation error or warning), or not. Since we do have the
+`-std=c26` option, and the issues are security relevant, an error
+seems to be best.  Implementations might choose to go for warnings on
+not-valid scripts, mixed scripts, or invalid sequences of combining
+marks though for fear of political backlash, even if the Unicode
+Standard recommended for decades that identifiers should stay
+identifiable. If the standard committee opts for the insecure option,
+they should rather rename identifiers to symbols then. This would be
+the political solution.
+
+4 Motivation
+============
+
+* <https://websec.github.io/unicode-security-guide/visual-spoofing/>
+* <http://www.unicode.org/reports/tr31/>, <http://www.unicode.org/reports/tr36/>
+  and <http://www.unicode.org/reports/tr39>
+* <https://twitter.com/zygoloid/status/1187150150835195905>,
+  <https://github.com/golang/go/issues/20209>,
+  <https://twitter.com/jupenur/status/1244286243518713857>
+* <https://certitude.consulting/blog/en/invisible-backdoor/>
+
+These changes would fix all of the known security problems with C++/C
+identifiers.
 
-4 What will this proposal change
+5 What will this proposal change
 ================================
 
-4.1 The set of TR31 XID characters will become much smaller
+5.1 The set of TR31 XID characters will become much smaller
 -----------------------------------------------------------
 
 Restricting the **Identifier Type** plus the Recommended Scripts, plus
@@ -119,9 +139,10 @@
 `XID_Start`: 131876 codepoints,
 `XID_Continue`: 135053 codepoints (= `XID_Start` + 3173)
 
-See 13 "Appendix A - C23XID_Start" and 13 "Appendix B - C23XID_Continue"
+See [13 "Appendix A - C26XID_Start"](#appendix-a---c26xid_start) and
+[14 "Appendix B - C26XID_Continue"](#appendix-b---c26xid_continue)
 
-4.2 Only Recommended scripts are now allowed, Excluded and Limited_Use not
+5.2 Only Recommended scripts are now allowed, Excluded and Limited_Use not
 --------------------------------------------------------------------------
 
 These scripts will stay allowed:
@@ -167,10 +188,10 @@
 which maps somehow to the 4-letter [ISO 15924
 Codes](https://www.unicode.org/reports/tr24/#Relation_To_ISO15924).
 
-4.3 Documents with identifiers in many multiple scripts/languages will become illegal
+5.3 Documents with identifiers in many multiple scripts/languages will become illegal
 -------------------------------------------------------------------------------------
 
-C++23 (and C23) will follow the TR39 Security Profile 4 **Moderately
+C26 (and C26++) will follow the TR39 Security Profile 4 **Moderately
 Restrictive**, with an exception for Greek.
 
 * All identifiers in a document qualify as Single Script, or
@@ -184,28 +205,29 @@
 * Allow some Greek letters mixed with Latin, that are not confusable
   with Latin letters.
 
-4.4 Mixed-script runs with combining marks will become illegal
+5.4 Mixed-script runs with combining marks will become illegal
 --------------------------------------------------------------
 
-C23++ will check for unlikely sequences of **combining marks**, and
+C26 will check for unlikely sequences of **combining marks**, and
 reject some.  Combining Marks have no script property per se, but a
 variable list of allowed SCX scripts, which need to be checked against
 the base character. Also 4 Japanese KATAKANA-HIRAGANA PROLONGED SOUND
 MARK modifier letters.
 
-See 7.2 "SCX Extensions" and 7.3 "Combining marks script run detection
-for spoofing" below.
+See [8.2 "SCX Extensions"](#scx-extensions) and [8.3 "Combining marks
+script run detection for spoofing"](#combining-marks-script-run-detection-for-spoofing)
+below.
 
-5 What will this proposal not change
+6 What will this proposal not change
 ====================================
 
-5.1 The validity of “extended”" characters in identifiers
+6.1 The validity of “extended” characters in identifiers
 ---------------------------------------------------------
 
 All current compilers allow characters outside the basic source
 character set directly in source today.
 
-6 Why now
+7 Why now
 =========
 
 One driving factor for addressing this now is that GCC has fixed their
@@ -228,12 +250,16 @@
 new bidi warning, and github to implement similar warnings. Note that
 secure identifiers don't help against bidi overrides in strings or
 comments, these issues are orthogonal.
+The Unicode consortium implemented a unicode spoofing taskforce
+<https://www.unicode.org/L2/L2022/22007-avoiding-spoof.pdf>. Their
+ICU library would need an identifier check API at least.
 
 There used to be no linter, but there is now one: **u8idlint** from
 <https://github.com/rurban/libu8ident>, which can be used to check for
-ALLOWED,SAFEC23,ID,XID,C11 or ALLUTF8 TR31 profiles, for various TR39
+ALLOWED,SAFEC26,ID,XID,C11 or ALLUTF8 TR31 profiles, for various TR39
 mixed script profile violations, confusables, invalid combining marks
-and TR15 normalization problems.
+and TR15 normalization problems. Go also came up with a unicode
+spoofing linter lately. <https://github.com/NebulousLabs/glyphcheck>
 
 So far only Rust, cperl and Java follow a unicode security guideline
 for identifiers, zig and J refused to support non-ASCII
@@ -241,13 +267,13 @@
 and does allow non-identifiable identifiers. They should rename
 identifiers to "symbols".
 
-7 TR24 Scripts, the SC and SCX properties
+8 TR24 Scripts, the SC and SCX properties
 =========================================
 
-7.1 SC
+8.1 SC
 -----
 
-C++ only needs to map unicode characters to a script property via a
+C only needs to map unicode characters to a script property via a
 single byte.  There are currently 161 scripts assigned, 32 of them are
 in common use as identifiers, hence called **Recommended** scripts. The
 rest is split up into 127-31 **Excluded** scripts, which are not in common
@@ -272,7 +298,7 @@
 Table 7, Limited Use Scripts. To avoid security issues, some
 implementations may wish to disallow the limited-use scripts in
 identifiers. For more information on usage, see the Unicode Locale
-project [CLDR](http://cldr.unicode.org/)."
+project [CLDR](http://cldr.unicode.org/)."_
 
 Regarding stability: New scripts are added on a yearly basis, but
 nothing was added to the stable set of recommended scripts. For a
@@ -288,19 +314,19 @@
 Script Property Value is the titlecased name of the script from the
 UCD, with spaces replaced by underscores. They are defined in the
 yearly updated
-[Scripts.txt](https://www.unicode.org/Public/UNIDATA/Scripts.txt)
+[Scripts](https://www.unicode.org/Public/UNIDATA/Scripts.txt)
 
-7.2 SCX Extensions
+8.2 SCX Extensions
 ------------------
 
 Not all characters are uniquely used in a single script only.  Many
 are used in a variable numbers of scripts. These are assigned to the
 Common or Inherited script, and are exactly specified in the
-[ScriptExtensions.txt](https://www.unicode.org/Public/UNIDATA/ScriptExtensions.txt),
+[ScriptExtensions](https://www.unicode.org/Public/UNIDATA/ScriptExtensions.txt),
 aka SCX. The SCX property is a list of possible scripts per character.
 This list is using the short 4-letter script property, which needs to
 be resolved via the
-[PropertyValueAliases.txt](https://www.unicode.org/Public/UNIDATA/PropertyValueAliases.txt)
+[PropValue](https://www.unicode.org/Public/UNIDATA/PropertyValueAliases.txt)
 to its long script property value. (E.g. Syrc to Syriac)
 
     # Script_Extensions=Arab Syrc
@@ -314,7 +340,8 @@
 Some of the SCX scripts contain only a single script. These could be
 directly added to the list of SC scripts for the purpose of identifier
 security checks, but I advise against, for easier Combining Marks
-checks against the base character script. See below 7.3.
+checks against the base character script. See below
+[8.3](#combining-marks-script-run-detection-for-spoofing).
 
 E.g.
 
@@ -328,7 +355,7 @@
 Syriac was already seen. If not, the new character with that SCX is
 illegal, violating our Mixed Script profile.
 
-7.3 Combining marks script run detection for spoofing
+8.3 Combining marks script run detection for spoofing
 -----------------------------------------------------
 
 Check for unlikely sequences of **combining marks**:
@@ -357,7 +384,7 @@
 SOUND MARKs, all other Lm modifiers may mix with all SCX.
 
 The list of allowed combining mark characters (with Common or Inherited
-scripts) in the C23++ TR31 profile is: Lm `Modifier_Letter`,
+scripts) in the C26 TR31 profile is: Lm `Modifier_Letter`,
 Mc `Spacing_Mark`, Mn `Nonspacing_Mark`, Me `Enclosing_Mark`. Sk and Cf are
 not part of XIDs.
 
@@ -382,16 +409,16 @@
 ...
 ```
 
-From these 67 Lm plus 513 M\[cn\] ranges filtering out the non-C23 XID
+From these 67 Lm plus 513 M\[cn\] ranges filtering out the non-C26 XID
 candidates, only #8 Identifier_Type = Recommended, Inclusion,
-Technical, plus only #4.2 Recommended Scripts, plus only codepoints
+non-confusable Technical, plus only #4.2 Recommended Scripts, plus only codepoints
 with multiple SCX entries, plus only codepoints which don't decompose
 to NFC, leads only to the Lm characters, which can mix with all
 scripts. Not a single Mn or Mc codepoints is left.
 
 So some of the Common `XID_Continue` marks therefore cannot be
 detected with the SCX logic. But all of them do not combine with Latin
-and are already filtered by the C23 Mixed Script profile.
+and are already filtered by the C26 Mixed Script profile.
 And all of the Combining Marks are caught by the NFC requirement.
 
 Most Lm Modifier Letters (besides the 4 Japanese PROLONGED SOUND
@@ -405,7 +432,7 @@
 Property](https://www.unicode.org/reports/tr24/#Common) and [TR24#5.2
 Handling Combining Marks](https://www.unicode.org/reports/tr24/#Nonspacing_Marks).
 
-8 TR39 Identifier Type
+9 TR39 Identifier Type
 ======================
 
 TR31 recommends to disable some characters from recommended scripts:
@@ -420,26 +447,31 @@
 identifiers."_
 
 The **Identifier Type** property [TR39#Table 1](https://www.unicode.org/reports/tr39/#Identifier_Status_and_Type)
-recommendation should be mandatory, with the addition of the `Technical`
+recommendation should be mandatory, with the addition of the non-confusable `Technical`
 Identifier Type to be allowed.
 
 I.e. `Limited_Use, Obsolete, Exclusion, Not_XID, Not_NFKC, Default_Ignorable,`
 `Deprecated, Not_Character` are not part of identifiers.
 
-Allowed are `Recommended, Inclusion, Technical` TR39 Identifier Types.
+Allowed are Recommended, Inclusion, and all non-confusable Technical
+TR39 Identifier Types.
+
+Note that several Technical Identifier_Type are confusable, but not
+marked as such. So far only the the Latin letters U+1C0 ǀ, U+1C1 ǁ, U+1C3 ǃ
+which are confusable with operators.
 
 Additionally the Halfwidth and Fullwidth Forms, U+FF00..U+FFEF are
 forbidden, even if allowed in TR31. They are confusable with the Latin
 base alphabet A-Z.
 
-And there are 80 Technical ranges added to the original list of
+And there are 79 Technical ranges added to the original list of
 Recommended and Inclusion ID's.
 
     grep ', U8ID_Technical' scripts.h | egrep -v 'Not_XID|U8ID_Obsolete|U8ID_Exclusion'
 
-See 17 Appendix E - IDType Technical.
+See [18 Appendix E - IDType Technical](#appendix-e---idtype-technical).
 
-9 TR39 Mixed Scripts
+10 TR39 Mixed Scripts
 ====================
 
 TR39 defines some security profiles for identifers to avoid the most
@@ -447,7 +479,7 @@
 identifiable.
 
 We choose a variant of the **Moderately Restrictive** profile, with an
-exception for Greek.  I called this profile C23_4 or SAFEC23
+exception for Greek.  I called this profile C26_4 or SAFEC26
 in libu8ident.
 
 * All identifiers in a document qualify as Single Script, or
@@ -465,7 +497,8 @@
 Latin letter which looks the same as the Greek counterpart, the Greek
 letter is forbidden, choose the Latin one instead. E.g.
 ( Α → A ) GREEK CAPITAL LETTER ALPHA → LATIN CAPITAL LETTER A.
-See **18 Appendix F** for the generated list with 10 exceptions.
+See [19 Appendix F](#appendix-f---greek-confusables) for the generated
+list with 10 exceptions.
 
 Thus it prevents Cyrillic mixed with Latin or any other script, but
 does allow any East-Asian CFK language, other common and widely used
@@ -487,13 +520,15 @@
              Greek confusable
 * U+03F2 ( ϲ → c ) GREEK LUNATE SIGMA SYMBOL → LATIN SMALL LETTER C
              Greek confusable
+* U+0381 ; ( α → a ) GREEK SMALL LETTER ALPHA. Not confusable
+* U+03F1 ; ( ϱ → p ) GREEK RHO SYMBOL → LATIN SMALL LETTER P. Not confusable
 
 TR39 also compiles a convenient
 [IdentifierStatus](https://www.unicode.org/Public/security/latest/IdentifierStatus.txt)
 list. But all the math letters with Script=Common from U+2100 to
 U+2200 are restricted, as Greek is forbidden mixed with Latin in the
 original TR39 Moderately Restrictive profile. Most are allowed
-according to the TR31 and TR39 rules of SAFEC23, so we need to come up
+according to the TR31 and TR39 rules of SAFEC26, so we need to come up
 with our own list of `XID_Start/XID_Continue` codepoints, excluding
 the Limited Use and Excluded scripts. And if an implementation choses
 to allow Excluded scripts with more logic to allow only this script.
@@ -513,27 +548,26 @@
 spoofing attacks, but the additional rules from 7.3 "Combining marks
 script run detection for spoofing" are kept tiny.
 
-10 Contexts
+11 Contexts
 ===========
 
 This is not discussed in any of the unicode security guidelines for
 identifiers.  One could argue that a mixed-script profile is valid
 only for a single identifier, or it is valid for the whole source file
 document. And there needs to be a definition if before or after the
-preprocessor, and if to treat names in private structs and classes as
-seperate contexts.
+preprocessor, and if to treat names in private structs as seperate
+contexts.
 
 If valid for only a single identifier you could arbitralily mix up
-Cyrillic with Greek identifiers in a C++ namespace, and thus these
+Cyrillic with Greek identifiers in a C files, and thus these
 identifiers would not be identifiable anymore, as both both can render
 to the very same glyphs. Thus we adopt the notion of identifier
 contexts.
 
 With programming languages this is a source file, with objects files
-this is a module.  For identifiers in object files see below [12
-Issues with binutils, linkers, exported identifiers](#12 Issues with
-binutils, linkers, exported identifiers). For filesystems this would
-be a directory.
+this is a module.  For identifiers in object files see below [13
+Issues with binutils, linkers, exported identifiers](#issues-with-binutils-linkers-exported-identifiers).
+For filesystems this would be a directory.
 
 For every source file we need to store a context with the list of
 already seen scripts and how many.  The maximal number of scripts is
@@ -556,14 +590,15 @@
   arabic fields, and include another header with Cyrillic only
   names. This would allow confusables in the resulting object
   file, and source files would be easy to check with external tools.
-  See also the binutils section 12 below.
+  See also the [binutils section 12](#12-issues-with-binutils-linkers-exported-identifiers)
+  below.
 
 - **private**: Another argument would be that all exported names end
   up in the object files and library flat, which would support the
   seperation of private and public name contexts, where to perform the
-  mixed-script checks. Private contexts (e.g. static structs or
-  private class fields) should be seperated from the rest.  This would
-  prevent from confusuables in struct/class fields/methods, and the
+  mixed-script checks. Private contexts (e.g. static structs fields)
+  should be seperated from the rest.  This would
+  prevent from confusables in struct fields/methods, and the
   rest is seperated by the checks for the public names.
 
 - **after-cpp**: The third, strictest variant would define the context in
@@ -579,7 +614,7 @@
   speaker can identify and see differences in its names without long
   training. Same for CFK and the other major scripts.
 
-11 Implementations and Strategies
+12 Implementations and Strategies
 =================================
 
 I implemented for [cperl](https://github.com/perl11/cperl), a fork of
@@ -604,10 +639,10 @@
 convincibly faster, neither hybrid searches by 1. splitting up ranges
 from single codepoints, nor 2. seperating 16bit from 32bit codepoints.
 
-12 Issues with binutils, linkers, exported identifiers
+13 Issues with binutils, linkers, exported identifiers
 =====================================================
 
-The crux with C and somewhat also C++ identifiers, is that they can be
+The crux with C and somewhat also C identifiers, is that they can be
 used with other earlier compilers or languages without any unicode security
 profile or restriction. ffi's are very common, libraries or .def files
 even more, thanksfully unicode names not at all yet.
@@ -617,9 +652,9 @@
 there, and names are charset (=user) specific, whilst there are no header
 fields for the used charset (e.g. if SHIFT-JIS or UTF-8), nor are
 there any rules for name lookup (normalization). This is not solvable
-here (in C nor C++), only there. Only in the Rust ecosystem there are
-proper unicode identifier rules, but Rust can link against
-C++/C. I haven't detected any exported unicode names in the wild, they
+here (in C), only there. Only in the Rust ecosystem there are
+proper unicode identifier rules, but Rust can link against C.
+I haven't detected any exported unicode names in the wild, they
 are only used in local symbols still. UTF-16 compilers such as MSVC do
 export their UNICODE names either in the local character set or as
 UTF-8. If used wildly, object files would not link anymore, as local
@@ -629,16 +664,17 @@
 groups to adopt a more precise specification how exported identifiers
 are represented in object files and libraries: UTF-8 or any charset,
 and how they are looked up: any normalization, NFC or not at all.  My
-recommendation would be to interpret them as UTF-8, require NFC, and
-reject all illegal UTF-8 and non-NFC identifiers. As long as there no
+recommendation would be to interpret them as UTF-8, use NFC for the
+lookup, and reject all illegal UTF-8 identifiers. As long as there no
 unicode names in the wild this is still easy. There are also many
 object file producers in the wild, with possibly completely insecure
 unicode names in the future.
 
 binutils `readelf -L -Ul` is currently broken displaying unicode
 identifiers.  I have patches to display them in the current multi-byte
-locale, and to add u8ident checks with -L. I haven't found any
-violations so far in my used libraries.
+locale, and to add u8ident checks with `-L`. I haven't found any
+violations so far in my used libraries, but a Debian/Fedora/FreeBSD
+mass-scan seems necessary.
 
 Even better would be for the C ABI's to also adopt secure unicode
 identifiers, as linkers and FFI's have the same unicode security
@@ -647,16 +683,16 @@
 identifiable, and implementation defined and their interpretation locale
 specific. (i.e. you cannot copy them across locales).
 
-13 Appendix A - C23XID_Start
+14 Appendix A - C26XID_Start
 ============================
 
-Created with mkc23 from libu8ident.
+Created with mkc26 from libu8ident.
 _The SCX is modelled as if your compiler would allow static initialization of
 strings as {char,...,0}._
 
 ``` c
 
-struct sc_c23 {
+struct sc_c26 {
     uint32_t from;
     uint32_t to;
     enum u8id_sc sc; // Scripts
@@ -667,44 +703,69 @@
 
 // Filtering allowed scripts, XID_Start, safe IDTypes, NFC, !MEDIAL and !MARK
 // Ranges split at GC and SCX changes
-const struct sc_c23 safec23_start_list[470] = {
+const struct sc_c26 safec26_start_list[336] = {
     {'$', '$', SC_Latin, GC_Sc, NULL},
     {'A', 'Z', SC_Latin, GC_Lu, NULL},
     {'_', '_', SC_Latin, GC_Pc, NULL},
     {'a', 'z', SC_Latin, GC_Ll, NULL},
-    {0xAA, 0xAA, SC_Latin, GC_Lo, NULL}, //  ª
-    {0xB5, 0xB5, SC_Common, GC_Ll, NULL}, //  µ
-    {0xBA, 0xBA, SC_Latin, GC_Lo, NULL}, //  º
     {0xC0, 0xD6, SC_Latin, GC_Lu, NULL}, //  À..Ö
     {0xD8, 0xF6, SC_Latin, GC_L, NULL}, //  Ø..ö
-    {0xF8, 0x2B8, SC_Latin, GC_L, NULL}, //  ø..ʸ
-    {0x2BA, 0x2C1, SC_Common, GC_Lm, NULL}, //  ʺ..ˁ
+    {0xF8, 0x131, SC_Latin, GC_L, NULL}, //  ø..ı
+    {0x134, 0x13E, SC_Latin, GC_L, NULL}, //  Ĵ..ľ
+    {0x141, 0x148, SC_Latin, GC_L, NULL}, //  Ł..ň
+    {0x14A, 0x17E, SC_Latin, GC_L, NULL}, //  Ŋ..ž
+    {0x180, 0x180, SC_Latin, GC_Ll, NULL}, //  ƀ
+    {0x18F, 0x18F, SC_Latin, GC_Lu, NULL}, //  Ə
+    {0x1A0, 0x1A1, SC_Latin, GC_L, NULL}, //  Ơ..ơ
+    {0x1AF, 0x1B0, SC_Latin, GC_L, NULL}, //  Ư..ư
+    {0x1CD, 0x1DC, SC_Latin, GC_L, NULL}, //  Ǎ..ǜ
+    {0x1DE, 0x1E3, SC_Latin, GC_L, NULL}, //  Ǟ..ǣ
+    {0x1E6, 0x1F0, SC_Latin, GC_L, NULL}, //  Ǧ..ǰ
+    {0x1F4, 0x1F5, SC_Latin, GC_L, NULL}, //  Ǵ..ǵ
+    {0x1F8, 0x21B, SC_Latin, GC_L, NULL}, //  Ǹ..ț
+    {0x21E, 0x21F, SC_Latin, GC_L, NULL}, //  Ȟ..ȟ
+    {0x226, 0x236, SC_Latin, GC_L, NULL}, //  Ȧ..ȶ
+    {0x250, 0x252, SC_Latin, GC_Ll, NULL}, //  ɐ..ɒ
+    {0x255, 0x255, SC_Latin, GC_Ll, NULL}, //  ɕ
+    {0x258, 0x25A, SC_Latin, GC_Ll, NULL}, //  ɘ..ɚ
+    {0x25C, 0x262, SC_Latin, GC_Ll, NULL}, //  ɜ..ɢ
+    {0x264, 0x267, SC_Latin, GC_Ll, NULL}, //  ɤ..ɧ
+    {0x26A, 0x271, SC_Latin, GC_Ll, NULL}, //  ɪ..ɱ
+    {0x273, 0x276, SC_Latin, GC_Ll, NULL}, //  ɳ..ɶ
+    {0x278, 0x27B, SC_Latin, GC_Ll, NULL}, //  ɸ..ɻ
+    {0x27D, 0x288, SC_Latin, GC_Ll, NULL}, //  ɽ..ʈ
+    {0x28A, 0x291, SC_Latin, GC_Ll, NULL}, //  ʊ..ʑ
+    {0x293, 0x29D, SC_Latin, GC_L, NULL}, //  ʓ..ʝ
+    {0x29F, 0x2AF, SC_Latin, GC_Ll, NULL}, //  ʟ..ʯ
+    {0x2B9, 0x2C1, SC_Common, GC_Lm, NULL}, //  ʹ..ˁ
     {0x2C6, 0x2D1, SC_Common, GC_Lm, NULL}, //  ˆ..ˑ
-    {0x2E0, 0x2E4, SC_Latin, GC_Lm, NULL}, //  ˠ..ˤ
     {0x2EC, 0x2EC, SC_Common, GC_Lm, NULL}, //  ˬ
     {0x2EE, 0x2EE, SC_Common, GC_Lm, NULL}, //  ˮ
-    {0x370, 0x373, SC_Greek, GC_L, NULL}, //  Ͱ..ͳ
-    {0x376, 0x377, SC_Greek, GC_L, NULL}, //  Ͷ..ͷ
     {0x37B, 0x37D, SC_Greek, GC_Ll, NULL}, //  ͻ..ͽ
-    {0x37F, 0x37F, SC_Greek, GC_Lu, NULL}, //  Ϳ
     {0x386, 0x386, SC_Greek, GC_Lu, NULL}, //  Ά
     {0x388, 0x38A, SC_Greek, GC_Lu, NULL}, //  Έ..Ί
     {0x38C, 0x38C, SC_Greek, GC_Lu, NULL}, //  Ό
     {0x38E, 0x3A1, SC_Greek, GC_L, NULL}, //  Ύ..Ρ
-    {0x3A3, 0x3E1, SC_Greek, GC_L, NULL}, //  Σ..ϡ
-    {0x3F0, 0x3F5, SC_Greek, GC_L, NULL}, //  ϰ..ϵ
-    {0x3F7, 0x3FF, SC_Greek, GC_L, NULL}, //  Ϸ..Ͽ
-    {0x401, 0x481, SC_Cyrillic, GC_L, NULL}, //  Ё..ҁ
-    {0x48A, 0x52F, SC_Cyrillic, GC_L, NULL}, //  Ҋ..ԯ
+    {0x3A3, 0x3CF, SC_Greek, GC_L, NULL}, //  Σ..Ϗ
+    {0x3D7, 0x3D7, SC_Greek, GC_Ll, NULL}, //  ϗ
+    {0x3FC, 0x3FF, SC_Greek, GC_L, NULL}, //  ϼ..Ͽ
+    {0x401, 0x45F, SC_Cyrillic, GC_L, NULL}, //  Ё..џ
+    {0x48A, 0x4FF, SC_Cyrillic, GC_L, NULL}, //  Ҋ..ӿ
+    {0x510, 0x529, SC_Cyrillic, GC_L, NULL}, //  Ԑ..ԩ
+    {0x52E, 0x52F, SC_Cyrillic, GC_L, NULL}, //  Ԯ..ԯ
     {0x531, 0x556, SC_Armenian, GC_Lu, NULL}, //  Ա..Ֆ
     {0x559, 0x559, SC_Armenian, GC_Lm, NULL}, //  ՙ
-    {0x560, 0x588, SC_Armenian, GC_Ll, NULL}, //  ՠ..ֈ
+    {0x560, 0x586, SC_Armenian, GC_Ll, NULL}, //  ՠ..ֆ
+    {0x588, 0x588, SC_Armenian, GC_Ll, NULL}, //  ֈ
     {0x5D0, 0x5EA, SC_Hebrew, GC_Lo, NULL}, //  א..ת
     {0x5EF, 0x5F2, SC_Hebrew, GC_Lo, NULL}, //  ׯ..ײ
     {0x620, 0x63F, SC_Arabic, GC_Lo, NULL}, //  ؠ..ؿ
     {0x641, 0x64A, SC_Arabic, GC_Lo, NULL}, //  ف..ي
-    {0x66E, 0x66F, SC_Arabic, GC_Lo, NULL}, //  ٮ..ٯ
-    {0x671, 0x6D3, SC_Arabic, GC_Lo, NULL}, //  ٱ..ۓ
+    {0x671, 0x672, SC_Arabic, GC_Lo, NULL}, //  ٱ..ٲ
+    {0x674, 0x674, SC_Arabic, GC_Lo, NULL}, //  ٴ
+    {0x679, 0x68D, SC_Arabic, GC_Lo, NULL}, //  ٹ..ڍ
+    {0x68F, 0x6A0, SC_Arabic, GC_Lo, NULL}, //  ڏ..ڠ
+    {0x6A2, 0x6D3, SC_Arabic, GC_Lo, NULL}, //  ڢ..ۓ
     {0x6D5, 0x6D5, SC_Arabic, GC_Lo, NULL}, //  ە
     {0x6E5, 0x6E6, SC_Arabic, GC_Lm, NULL}, //  ۥ..ۦ
     {0x6EE, 0x6EF, SC_Arabic, GC_Lo, NULL}, //  ۮ..ۯ
@@ -715,12 +776,15 @@
     {0x7B1, 0x7B1, SC_Thaana, GC_Lo, NULL}, //  ޱ
     {0x870, 0x887, SC_Arabic, GC_Lo, NULL}, //  ࡰ..ࢇ
     {0x889, 0x88E, SC_Arabic, GC_Lo, NULL}, //  ࢉ..ࢎ
-    {0x8A0, 0x8C9, SC_Arabic, GC_L, NULL}, //  ࢠ..ࣉ
+    {0x8A0, 0x8AC, SC_Arabic, GC_Lo, NULL}, //  ࢠ..ࢬ
+    {0x8B2, 0x8B2, SC_Arabic, GC_Lo, NULL}, //  ࢲ
+    {0x8B5, 0x8C9, SC_Arabic, GC_L, NULL}, //  ࢵ..ࣉ
     {0x904, 0x939, SC_Devanagari, GC_Lo, NULL}, //  ऄ..ह
     {0x93D, 0x93D, SC_Devanagari, GC_Lo, NULL}, //  ऽ
     {0x950, 0x950, SC_Devanagari, GC_Lo, NULL}, //  ॐ
     {0x960, 0x961, SC_Devanagari, GC_Lo, NULL}, //  ॠ..ॡ
-    {0x971, 0x97F, SC_Devanagari, GC_L, NULL}, //  ॱ..ॿ
+    {0x971, 0x977, SC_Devanagari, GC_L, NULL}, //  ॱ..ॷ
+    {0x979, 0x97F, SC_Devanagari, GC_Lo, NULL}, //  ॹ..ॿ
     {0x985, 0x98C, SC_Bengali, GC_Lo, NULL}, //  অ..ঌ
     {0x98F, 0x990, SC_Bengali, GC_Lo, NULL}, //  এ..ঐ
     {0x993, 0x9A8, SC_Bengali, GC_Lo, NULL}, //  ও..ন
@@ -731,7 +795,6 @@
     {0x9CE, 0x9CE, SC_Bengali, GC_Lo, NULL}, //  ৎ
     {0x9E0, 0x9E1, SC_Bengali, GC_Lo, NULL}, //  ৠ..ৡ
     {0x9F0, 0x9F1, SC_Bengali, GC_Lo, NULL}, //  ৰ..ৱ
-    {0x9FC, 0x9FC, SC_Bengali, GC_Lo, NULL}, //  ৼ
     {0xA05, 0xA0A, SC_Gurmukhi, GC_Lo, NULL}, //  ਅ..ਊ
     {0xA0F, 0xA10, SC_Gurmukhi, GC_Lo, NULL}, //  ਏ..ਐ
     {0xA13, 0xA28, SC_Gurmukhi, GC_Lo, NULL}, //  ਓ..ਨ
@@ -750,7 +813,6 @@
     {0xABD, 0xABD, SC_Gujarati, GC_Lo, NULL}, //  ઽ
     {0xAD0, 0xAD0, SC_Gujarati, GC_Lo, NULL}, //  ૐ
     {0xAE0, 0xAE1, SC_Gujarati, GC_Lo, NULL}, //  ૠ..ૡ
-    {0xAF9, 0xAF9, SC_Gujarati, GC_Lo, NULL}, //  ૹ
     {0xB05, 0xB0C, SC_Oriya, GC_Lo, NULL}, //  ଅ..ଌ
     {0xB0F, 0xB10, SC_Oriya, GC_Lo, NULL}, //  ଏ..ଐ
     {0xB13, 0xB28, SC_Oriya, GC_Lo, NULL}, //  ଓ..ନ
@@ -774,9 +836,9 @@
     {0xC05, 0xC0C, SC_Telugu, GC_Lo, NULL}, //  అ..ఌ
     {0xC0E, 0xC10, SC_Telugu, GC_Lo, NULL}, //  ఎ..ఐ
     {0xC12, 0xC28, SC_Telugu, GC_Lo, NULL}, //  ఒ..న
-    {0xC2A, 0xC39, SC_Telugu, GC_Lo, NULL}, //  ప..హ
+    {0xC2A, 0xC33, SC_Telugu, GC_Lo, NULL}, //  ప..ళ
+    {0xC35, 0xC39, SC_Telugu, GC_Lo, NULL}, //  వ..హ
     {0xC3D, 0xC3D, SC_Telugu, GC_Lo, NULL}, //  ఽ
-    {0xC58, 0xC5A, SC_Telugu, GC_Lo, NULL}, //  ౘ..ౚ
     {0xC5D, 0xC5D, SC_Telugu, GC_Lo, NULL}, //  ౝ
     {0xC60, 0xC61, SC_Telugu, GC_Lo, NULL}, //  ౠ..ౡ
     {0xC80, 0xC80, SC_Kannada, GC_Lo, NULL}, //  ಀ
@@ -786,19 +848,21 @@
     {0xCAA, 0xCB3, SC_Kannada, GC_Lo, NULL}, //  ಪ..ಳ
     {0xCB5, 0xCB9, SC_Kannada, GC_Lo, NULL}, //  ವ..ಹ
     {0xCBD, 0xCBD, SC_Kannada, GC_Lo, NULL}, //  ಽ
-    {0xCDD, 0xCDE, SC_Kannada, GC_Lo, NULL}, //  ೝ..ೞ
+    {0xCDD, 0xCDD, SC_Kannada, GC_Lo, NULL}, //  ೝ
     {0xCE0, 0xCE1, SC_Kannada, GC_Lo, NULL}, //  ೠ..ೡ
     {0xCF1, 0xCF2, SC_Kannada, GC_Lo, NULL}, //  ೱ..ೲ
-    {0xD04, 0xD0C, SC_Malayalam, GC_Lo, NULL}, //  ഄ..ഌ
+    {0xD05, 0xD0C, SC_Malayalam, GC_Lo, NULL}, //  അ..ഌ
     {0xD0E, 0xD10, SC_Malayalam, GC_Lo, NULL}, //  എ..ഐ
     {0xD12, 0xD3A, SC_Malayalam, GC_Lo, NULL}, //  ഒ..ഺ
     {0xD3D, 0xD3D, SC_Malayalam, GC_Lo, NULL}, //  ഽ
     {0xD4E, 0xD4E, SC_Malayalam, GC_Lo, NULL}, //  ൎ
     {0xD54, 0xD56, SC_Malayalam, GC_Lo, NULL}, //  ൔ..ൖ
-    {0xD5F, 0xD61, SC_Malayalam, GC_Lo, NULL}, //  ൟ..ൡ
+    {0xD60, 0xD61, SC_Malayalam, GC_Lo, NULL}, //  ൠ..ൡ
     {0xD7A, 0xD7F, SC_Malayalam, GC_Lo, NULL}, //  ൺ..ൿ
-    {0xD85, 0xD96, SC_Sinhala, GC_Lo, NULL}, //  අ..ඖ
-    {0xD9A, 0xDB1, SC_Sinhala, GC_Lo, NULL}, //  ක..න
+    {0xD85, 0xD8E, SC_Sinhala, GC_Lo, NULL}, //  අ..ඎ
+    {0xD91, 0xD96, SC_Sinhala, GC_Lo, NULL}, //  එ..ඖ
+    {0xD9A, 0xDA5, SC_Sinhala, GC_Lo, NULL}, //  ක..ඥ
+    {0xDA7, 0xDB1, SC_Sinhala, GC_Lo, NULL}, //  ට..න
     {0xDB3, 0xDBB, SC_Sinhala, GC_Lo, NULL}, //  ඳ..ර
     {0xDBD, 0xDBD, SC_Sinhala, GC_Lo, NULL}, //  ල
     {0xDC0, 0xDC6, SC_Sinhala, GC_Lo, NULL}, //  ව..ෆ
@@ -815,7 +879,7 @@
     {0xEBD, 0xEBD, SC_Lao, GC_Lo, NULL}, //  ຽ
     {0xEC0, 0xEC4, SC_Lao, GC_Lo, NULL}, //  ເ..ໄ
     {0xEC6, 0xEC6, SC_Lao, GC_Lm, NULL}, //  ໆ
-    {0xEDC, 0xEDF, SC_Lao, GC_Lo, NULL}, //  ໜ..ໟ
+    {0xEDE, 0xEDF, SC_Lao, GC_Lo, NULL}, //  ໞ..ໟ
     {0xF00, 0xF00, SC_Tibetan, GC_Lo, NULL}, //  ༀ
     {0xF40, 0xF42, SC_Tibetan, GC_Lo, NULL}, //  ཀ..ག
     {0xF44, 0xF47, SC_Tibetan, GC_Lo, NULL}, //  ང..ཇ
@@ -835,13 +899,12 @@
     {0x106E, 0x1070, SC_Myanmar, GC_Lo, NULL}, //  ၮ..ၰ
     {0x1075, 0x1081, SC_Myanmar, GC_Lo, NULL}, //  ၵ..ႁ
     {0x108E, 0x108E, SC_Myanmar, GC_Lo, NULL}, //  ႎ
-    {0x10A0, 0x10C5, SC_Georgian, GC_Lu, NULL}, //  Ⴀ..Ⴥ
     {0x10C7, 0x10C7, SC_Georgian, GC_Lu, NULL}, //  Ⴧ
     {0x10CD, 0x10CD, SC_Georgian, GC_Lu, NULL}, //  Ⴭ
-    {0x10D0, 0x10FA, SC_Georgian, GC_Ll, NULL}, //  ა..ჺ
-    {0x10FC, 0x10FF, SC_Georgian, GC_L, NULL}, //  ჼ..ჿ
-    {0x1101, 0x11FF, SC_Hangul, GC_Lo, NULL}, //  ᄁ..ᇿ
-    {0x1201, 0x1248, SC_Ethiopic, GC_Lo, NULL}, //  ሁ..ቈ
+    {0x10D0, 0x10F0, SC_Georgian, GC_Ll, NULL}, //  ა..ჰ
+    {0x10F7, 0x10FA, SC_Georgian, GC_Ll, NULL}, //  ჷ..ჺ
+    {0x10FD, 0x10FF, SC_Georgian, GC_Ll, NULL}, //  ჽ..ჿ
+    {0x1200, 0x1248, SC_Ethiopic, GC_Lo, NULL}, //  ሀ..ቈ
     {0x124A, 0x124D, SC_Ethiopic, GC_Lo, NULL}, //  ቊ..ቍ
     {0x1250, 0x1256, SC_Ethiopic, GC_Lo, NULL}, //  ቐ..ቖ
     {0x1258, 0x1258, SC_Ethiopic, GC_Lo, NULL}, //  ቘ
@@ -858,29 +921,22 @@
     {0x1312, 0x1315, SC_Ethiopic, GC_Lo, NULL}, //  ጒ..ጕ
     {0x1318, 0x135A, SC_Ethiopic, GC_Lo, NULL}, //  ጘ..ፚ
     {0x1380, 0x138F, SC_Ethiopic, GC_Lo, NULL}, //  ᎀ..ᎏ
-    {0x1780, 0x17B3, SC_Khmer, GC_Lo, NULL}, //  ក..ឳ
+    {0x1780, 0x17A2, SC_Khmer, GC_Lo, NULL}, //  ក..អ
+    {0x17A5, 0x17A7, SC_Khmer, GC_Lo, NULL}, //  ឥ..ឧ
+    {0x17A9, 0x17B3, SC_Khmer, GC_Lo, NULL}, //  ឩ..ឳ
     {0x17D7, 0x17D7, SC_Khmer, GC_Lm, NULL}, //  ៗ
     {0x17DC, 0x17DC, SC_Khmer, GC_Lo, NULL}, //  ៜ
-    {0x1C80, 0x1C88, SC_Cyrillic, GC_Ll, NULL}, //  ᲀ..ᲈ
     {0x1C90, 0x1CBA, SC_Georgian, GC_Lu, NULL}, //  Ა..Ჺ
     {0x1CBD, 0x1CBF, SC_Georgian, GC_Lu, NULL}, //  Ჽ..Ჿ
-    {0x1CE9, 0x1CE9, SC_Common, GC_Lo, {SC_Devanagari,SC_Nandinagari,0}}, //  ᳩ
-    {0x1CEA, 0x1CEC, SC_Common, GC_Lo, {SC_Bengali,SC_Devanagari,0}}, //  ᳪ..ᳬ
-    {0x1CEE, 0x1CF1, SC_Common, GC_Lo, {SC_Devanagari,0}}, //  ᳮ..ᳱ
-    {0x1CF2, 0x1CF3, SC_Common, GC_Lo, {SC_Bengali,SC_Devanagari,SC_Grantha,
-      SC_Kannada,SC_Nandinagari,SC_Oriya,SC_Telugu,SC_Tirhuta,0}},  ᳲ..ᳳ
-    {0x1CF5, 0x1CF6, SC_Common, GC_Lo, {SC_Bengali,SC_Devanagari,0}}, //  ᳵ..ᳶ
-    {0x1CF5, 0x1CF6, SC_Common, GC_Lo, {SC_Bengali,SC_Devanagari,0}, //  ᳵ..ᳶ
-    {0x1CFA, 0x1CFA, SC_Common, GC_Lo, {SC_Nandinagari,0}}, //  ᳺ
     {0x1D00, 0x1D25, SC_Latin, GC_Ll, NULL}, //  ᴀ..ᴥ
     {0x1D27, 0x1D2A, SC_Greek, GC_Ll, NULL}, //  ᴧ..ᴪ
-    {0x1D2C, 0x1D5C, SC_Latin, GC_Lm, NULL}, //  ᴬ..ᵜ
-    {0x1D5E, 0x1D61, SC_Greek, GC_Lm, NULL}, //  ᵞ..ᵡ
-    {0x1D63, 0x1D65, SC_Latin, GC_Lm, NULL}, //  ᵣ..ᵥ
-    {0x1D67, 0x1D6A, SC_Greek, GC_Lm, NULL}, //  ᵧ..ᵪ
-    {0x1D6C, 0x1D77, SC_Latin, GC_Ll, NULL}, //  ᵬ..ᵷ
-    {0x1D79, 0x1DBE, SC_Latin, GC_L, NULL}, //  ᵹ..ᶾ
-    {0x1E00, 0x1EFF, SC_Latin, GC_L, NULL}, //  Ḁ..ỿ
+    {0x1D2F, 0x1D2F, SC_Latin, GC_Lm, NULL}, //  ᴯ
+    {0x1D3B, 0x1D3B, SC_Latin, GC_Lm, NULL}, //  ᴻ
+    {0x1D4E, 0x1D4E, SC_Latin, GC_Lm, NULL}, //  ᵎ
+    {0x1D6B, 0x1D77, SC_Latin, GC_Ll, NULL}, //  ᵫ..ᵷ
+    {0x1D79, 0x1D9A, SC_Latin, GC_Ll, NULL}, //  ᵹ..ᶚ
+    {0x1E00, 0x1E99, SC_Latin, GC_L, NULL}, //  Ḁ..ẙ
+    {0x1E9C, 0x1EFF, SC_Latin, GC_L, NULL}, //  ẜ..ỿ
     {0x1F01, 0x1F15, SC_Greek, GC_L, NULL}, //  ἁ..ἕ
     {0x1F18, 0x1F1D, SC_Greek, GC_Lu, NULL}, //  Ἐ..Ἕ
     {0x1F20, 0x1F45, SC_Greek, GC_L, NULL}, //  ἠ..ὅ
@@ -912,24 +968,10 @@
     {0x1FF6, 0x1FF8, SC_Greek, GC_L, NULL}, //  ῶ..Ὸ
     {0x1FFA, 0x1FFA, SC_Greek, GC_Lu, NULL}, //  Ὼ
     {0x1FFC, 0x1FFC, SC_Greek, GC_Lt, NULL}, //  ῼ
-    {0x2071, 0x2071, SC_Latin, GC_Lm, NULL}, //  ⁱ
-    {0x207F, 0x207F, SC_Latin, GC_Lm, NULL}, //  ⁿ
-    {0x2090, 0x209C, SC_Latin, GC_Lm, NULL}, //  ₐ..ₜ
-    {0x2102, 0x2102, SC_Common, GC_Lu, NULL}, //  ℂ
-    {0x2107, 0x2107, SC_Common, GC_Lu, NULL}, //  ℇ
-    {0x210A, 0x2113, SC_Common, GC_L, NULL}, //  ℊ..ℓ
-    {0x2115, 0x2115, SC_Common, GC_Lu, NULL}, //  ℕ
-    {0x2118, 0x211D, SC_Common, GC_V, NULL}, //  ℘..ℝ
-    {0x2124, 0x2124, SC_Common, GC_Lu, NULL}, //  ℤ
-    {0x2128, 0x2128, SC_Common, GC_Lu, NULL}, //  ℨ
-    {0x212C, 0x2131, SC_Common, GC_L, NULL}, //  ℬ..ℱ
-    {0x2133, 0x2139, SC_Common, GC_L, NULL}, //  ℳ..ℹ
-    {0x213C, 0x213F, SC_Common, GC_L, NULL}, //  ℼ..ℿ
-    {0x2145, 0x2149, SC_Common, GC_L, NULL}, //  ⅅ..ⅉ
-    {0x214E, 0x214E, SC_Latin, GC_Ll, NULL}, //  ⅎ
-    {0x2160, 0x2188, SC_Latin, GC_V, NULL}, //  Ⅰ..ↈ
-    {0x2C60, 0x2C7F, SC_Latin, GC_L, NULL}, //  Ⱡ..Ɀ
-    {0x2D00, 0x2D25, SC_Georgian, GC_Ll, NULL}, //  ⴀ..ⴥ
+    {0x2118, 0x2118, SC_Common, GC_Sm, NULL}, //  ℘
+    {0x212E, 0x212E, SC_Common, GC_So, NULL}, //  ℮
+    {0x2C60, 0x2C67, SC_Latin, GC_L, NULL}, //  Ⱡ..Ⱨ
+    {0x2C77, 0x2C7B, SC_Latin, GC_Ll, NULL}, //  ⱷ..ⱻ
     {0x2D27, 0x2D27, SC_Georgian, GC_Ll, NULL}, //  ⴧ
     {0x2D2D, 0x2D2D, SC_Georgian, GC_Ll, NULL}, //  ⴭ
     {0x2D80, 0x2D96, SC_Ethiopic, GC_Lo, NULL}, //  ⶀ..ⶖ
@@ -945,35 +987,30 @@
     {0x3007, 0x3007, SC_Han, GC_Nl, NULL}, //  〇
     {0x3021, 0x3029, SC_Han, GC_Nl, NULL}, //  〡..〩
     {0x3031, 0x3035, SC_Common, GC_Lm, {SC_Hiragana,SC_Katakana,0}}, //  〱..〵
-    {0x3038, 0x303B, SC_Han, GC_V, NULL}, //  〸..〻
+    {0x303B, 0x303B, SC_Han, GC_Lm, NULL}, //  〻
     {0x3041, 0x3096, SC_Hiragana, GC_Lo, NULL}, //  ぁ..ゖ
-    {0x309D, 0x309F, SC_Hiragana, GC_L, NULL}, //  ゝ..ゟ
+    {0x309D, 0x309E, SC_Hiragana, GC_Lm, NULL}, //  ゝ..ゞ
     {0x30A1, 0x30FA, SC_Katakana, GC_Lo, NULL}, //  ァ..ヺ
     {0x30FC, 0x30FC, SC_Common, GC_Lm, {SC_Hiragana,SC_Katakana,0}}, //  ー
-    {0x30FE, 0x30FF, SC_Katakana, GC_L, NULL}, //  ヾ..ヿ
-    {0x3105, 0x312F, SC_Bopomofo, GC_Lo, NULL}, //  ㄅ..ㄯ
-    {0x3131, 0x318E, SC_Hangul, GC_Lo, NULL}, //  ㄱ..ㆎ
+    {0x30FE, 0x30FE, SC_Katakana, GC_Lm, NULL}, //  ヾ
+    {0x3105, 0x312D, SC_Bopomofo, GC_Lo, NULL}, //  ㄅ..ㄭ
+    {0x312F, 0x312F, SC_Bopomofo, GC_Lo, NULL}, //  ㄯ
     {0x31A0, 0x31BF, SC_Bopomofo, GC_Lo, NULL}, //  ㆠ..ㆿ
-    {0x31F0, 0x31FF, SC_Katakana, GC_Lo, NULL}, //  ㇰ..ㇿ
     {0x3400, 0x4DBF, SC_Han, GC_Lo, NULL}, //  㐀..䶿
     {0x4E00, 0x9FFF, SC_Han, GC_Lo, NULL}, //  一..鿿
-    {0xA640, 0xA66E, SC_Cyrillic, GC_L, NULL}, //  Ꙁ..ꙮ
-    {0xA67F, 0xA69D, SC_Cyrillic, GC_L, NULL}, //  ꙿ..ꚝ
+    {0xA67F, 0xA67F, SC_Cyrillic, GC_Lm, NULL}, //  ꙿ
     {0xA717, 0xA71F, SC_Common, GC_Lm, NULL}, //  ꜗ..ꜟ
-    {0xA722, 0xA787, SC_Latin, GC_L, NULL}, //  Ꜣ..ꞇ
-    {0xA78B, 0xA7CA, SC_Latin, GC_L, NULL}, //  Ꞌ..ꟊ
+    {0xA788, 0xA788, SC_Common, GC_Lm, NULL}, //  ꞈ
+    {0xA78D, 0xA78E, SC_Latin, GC_L, NULL}, //  Ɥ..ꞎ
+    {0xA792, 0xA793, SC_Latin, GC_L, NULL}, //  Ꞓ..ꞓ
+    {0xA7AA, 0xA7AA, SC_Latin, GC_Lu, NULL}, //  Ɦ
+    {0xA7AE, 0xA7AF, SC_Latin, GC_L, NULL}, //  Ɪ..ꞯ
+    {0xA7B8, 0xA7CA, SC_Latin, GC_L, NULL}, //  Ꞹ..ꟊ
     {0xA7D0, 0xA7D1, SC_Latin, GC_L, NULL}, //  Ꟑ..ꟑ
     {0xA7D3, 0xA7D3, SC_Latin, GC_Ll, NULL}, //  ꟓ
     {0xA7D5, 0xA7D9, SC_Latin, GC_L, NULL}, //  ꟕ..ꟙ
-    {0xA7F2, 0xA7FF, SC_Latin, GC_L, NULL}, //  ꟲ..ꟿ
-    {0xA8F2, 0xA8F2, SC_Devanagari, GC_Lo, NULL}, //  ꣲ
-    {0xA8F3, 0xA8F7, SC_Devanagari, GC_Lo, {SC_Devanagari,SC_Tamil,0}}, //  ꣳ..ꣷ
-    {0xA8FB, 0xA8FB, SC_Devanagari, GC_Lo, NULL}, //  ꣻ
-    {0xA8FD, 0xA8FE, SC_Devanagari, GC_Lo, NULL}, //  ꣽ..ꣾ
-    {0xA960, 0xA97C, SC_Hangul, GC_Lo, NULL}, //  ꥠ..ꥼ
-    {0xA9CF, 0xA9CF, SC_Common, GC_Lm, {SC_Buginese,SC_Javanese,0}}, //  ꧏ
-    {0xA9E0, 0xA9E4, SC_Myanmar, GC_Lo, NULL}, //  ꧠ..ꧤ
-    {0xA9E6, 0xA9EF, SC_Myanmar, GC_L, NULL}, //  ꧦ..ꧯ
+    {0xA7FA, 0xA7FA, SC_Latin, GC_Ll, NULL}, //  ꟺ
+    {0xA9E7, 0xA9EF, SC_Myanmar, GC_Lo, NULL}, //  ꧧ..ꧯ
     {0xA9FA, 0xA9FE, SC_Myanmar, GC_Lo, NULL}, //  ꧺ..ꧾ
     {0xAA60, 0xAA76, SC_Myanmar, GC_L, NULL}, //  ꩠ..ꩶ
     {0xAA7A, 0xAA7A, SC_Myanmar, GC_Lo, NULL}, //  ꩺ
@@ -983,11 +1020,7 @@
     {0xAB11, 0xAB16, SC_Ethiopic, GC_Lo, NULL}, //  ꬑ..ꬖ
     {0xAB20, 0xAB26, SC_Ethiopic, GC_Lo, NULL}, //  ꬠ..ꬦ
     {0xAB28, 0xAB2E, SC_Ethiopic, GC_Lo, NULL}, //  ꬨ..ꬮ
-    {0xAB30, 0xAB5A, SC_Latin, GC_Ll, NULL}, //  ꬰ..ꭚ
-    {0xAB5C, 0xAB64, SC_Latin, GC_L, NULL}, //  ꭜ..ꭤ
-    {0xAB66, 0xAB69, SC_Latin, GC_L, NULL}, //  ꭦ..ꭩ
-    {0xD7B0, 0xD7C6, SC_Hangul, GC_Lo, NULL}, //  ힰ..ퟆ
-    {0xD7CB, 0xD7FB, SC_Hangul, GC_Lo, NULL}, //  ퟋ..ퟻ
+    {0xAB66, 0xAB68, SC_Latin, GC_Ll, NULL}, //  ꭦ..ꭨ
     {0xFA0E, 0xFA0F, SC_Han, GC_Lo, NULL}, //  﨎..﨏
     {0xFA11, 0xFA11, SC_Han, GC_Lo, NULL}, //  﨑
     {0xFA13, 0xFA14, SC_Han, GC_Lo, NULL}, //  﨓..﨔
@@ -995,149 +1028,16 @@
     {0xFA21, 0xFA21, SC_Han, GC_Lo, NULL}, //  﨡
     {0xFA23, 0xFA24, SC_Han, GC_Lo, NULL}, //  﨣..﨤
     {0xFA27, 0xFA29, SC_Han, GC_Lo, NULL}, //  﨧..﨩
-    {0xFB00, 0xFB06, SC_Latin, GC_Ll, NULL}, //  ﬀ..ﬆ
-    {0xFB13, 0xFB17, SC_Armenian, GC_Ll, NULL}, //  ﬓ..ﬗ
-    {0xFB20, 0xFB28, SC_Hebrew, GC_Lo, NULL}, //  ﬠ..ﬨ
-    {0xFB4F, 0xFB4F, SC_Hebrew, GC_Lo, NULL}, //  ﭏ
-    {0xFB51, 0xFB54, SC_Arabic, GC_Lo, NULL}, //  ﭑ..ﭔ
-    {0xFB56, 0xFB58, SC_Arabic, GC_Lo, NULL}, //  ﭖ..ﭘ
-    {0xFB5A, 0xFB5C, SC_Arabic, GC_Lo, NULL}, //  ﭚ..ﭜ
-    {0xFB5E, 0xFB60, SC_Arabic, GC_Lo, NULL}, //  ﭞ..ﭠ
-    {0xFB62, 0xFB64, SC_Arabic, GC_Lo, NULL}, //  ﭢ..ﭤ
-    {0xFB66, 0xFB68, SC_Arabic, GC_Lo, NULL}, //  ﭦ..ﭨ
-    {0xFB6A, 0xFB6C, SC_Arabic, GC_Lo, NULL}, //  ﭪ..ﭬ
-    {0xFB6E, 0xFB70, SC_Arabic, GC_Lo, NULL}, //  ﭮ..ﭰ
-    {0xFB72, 0xFB74, SC_Arabic, GC_Lo, NULL}, //  ﭲ..ﭴ
-    {0xFB76, 0xFB78, SC_Arabic, GC_Lo, NULL}, //  ﭶ..ﭸ
-    {0xFB7A, 0xFB7C, SC_Arabic, GC_Lo, NULL}, //  ﭺ..ﭼ
-    {0xFB7E, 0xFB80, SC_Arabic, GC_Lo, NULL}, //  ﭾ..ﮀ
-    {0xFB82, 0xFB90, SC_Arabic, GC_Lo, NULL}, //  ﮂ..ﮐ
-    {0xFB92, 0xFB94, SC_Arabic, GC_Lo, NULL}, //  ﮒ..ﮔ
-    {0xFB96, 0xFB98, SC_Arabic, GC_Lo, NULL}, //  ﮖ..ﮘ
-    {0xFB9A, 0xFB9C, SC_Arabic, GC_Lo, NULL}, //  ﮚ..ﮜ
-    {0xFB9E, 0xFBA2, SC_Arabic, GC_Lo, NULL}, //  ﮞ..ﮢ
-    {0xFBA4, 0xFBA8, SC_Arabic, GC_Lo, NULL}, //  ﮤ..ﮨ
-    {0xFBAA, 0xFBAC, SC_Arabic, GC_Lo, NULL}, //  ﮪ..ﮬ
-    {0xFBAE, 0xFBB1, SC_Arabic, GC_Lo, NULL}, //  ﮮ..ﮱ
-    {0xFBD3, 0xFBD5, SC_Arabic, GC_Lo, NULL}, //  ﯓ..ﯕ
-    {0xFBD7, 0xFBE6, SC_Arabic, GC_Lo, NULL}, //  ﯗ..ﯦ
-    {0xFBE8, 0xFBE8, SC_Arabic, GC_Lo, NULL}, //  ﯨ
-    {0xFBEA, 0xFBFE, SC_Arabic, GC_Lo, NULL}, //  ﯪ..ﯾ
-    {0xFC00, 0xFC5D, SC_Arabic, GC_Lo, NULL}, //  ﰀ..ﱝ
-    {0xFC64, 0xFCDE, SC_Arabic, GC_Lo, NULL}, //  ﱤ..ﳞ
-    {0xFCF5, 0xFD33, SC_Arabic, GC_Lo, NULL}, //  ﳵ..ﴳ
-    {0xFD3C, 0xFD3D, SC_Arabic, GC_Lo, NULL}, //  ﴼ..ﴽ
-    {0xFD50, 0xFD8F, SC_Arabic, GC_Lo, NULL}, //  ﵐ..ﶏ
-    {0xFD92, 0xFDC7, SC_Arabic, GC_Lo, NULL}, //  ﶒ..ﷇ
-    {0xFDF0, 0xFDF1, SC_Arabic, GC_Lo, NULL}, //  ﷰ..ﷱ
-    {0xFDF2, 0xFDF9, SC_Arabic, GC_Lo, {SC_Arabic,SC_Thaana,0}}, //  ﷲ..ﷹ
-    {0xFE71, 0xFE71, SC_Arabic, GC_Lo, NULL}, //  ﹱ
     {0xFE73, 0xFE73, SC_Arabic, GC_Lo, NULL}, //  ﹳ
-    {0xFE80, 0xFE8B, SC_Arabic, GC_Lo, NULL}, //  ﺀ..ﺋ
-    {0xFE8D, 0xFE91, SC_Arabic, GC_Lo, NULL}, //  ﺍ..ﺑ
-    {0xFE93, 0xFE97, SC_Arabic, GC_Lo, NULL}, //  ﺓ..ﺗ
-    {0xFE99, 0xFE9B, SC_Arabic, GC_Lo, NULL}, //  ﺙ..ﺛ
-    {0xFE9D, 0xFE9F, SC_Arabic, GC_Lo, NULL}, //  ﺝ..ﺟ
-    {0xFEA1, 0xFEA3, SC_Arabic, GC_Lo, NULL}, //  ﺡ..ﺣ
-    {0xFEA5, 0xFEA7, SC_Arabic, GC_Lo, NULL}, //  ﺥ..ﺧ
-    {0xFEA9, 0xFEB3, SC_Arabic, GC_Lo, NULL}, //  ﺩ..ﺳ
-    {0xFEB5, 0xFEB7, SC_Arabic, GC_Lo, NULL}, //  ﺵ..ﺷ
-    {0xFEB9, 0xFEBB, SC_Arabic, GC_Lo, NULL}, //  ﺹ..ﺻ
-    {0xFEBD, 0xFEBF, SC_Arabic, GC_Lo, NULL}, //  ﺽ..ﺿ
-    {0xFEC1, 0xFEC3, SC_Arabic, GC_Lo, NULL}, //  ﻁ..ﻃ
-    {0xFEC5, 0xFEC7, SC_Arabic, GC_Lo, NULL}, //  ﻅ..ﻇ
-    {0xFEC9, 0xFECB, SC_Arabic, GC_Lo, NULL}, //  ﻉ..ﻋ
-    {0xFECD, 0xFECF, SC_Arabic, GC_Lo, NULL}, //  ﻍ..ﻏ
-    {0xFED1, 0xFED3, SC_Arabic, GC_Lo, NULL}, //  ﻑ..ﻓ
-    {0xFED5, 0xFED7, SC_Arabic, GC_Lo, NULL}, //  ﻕ..ﻗ
-    {0xFED9, 0xFEDB, SC_Arabic, GC_Lo, NULL}, //  ﻙ..ﻛ
-    {0xFEDD, 0xFEDF, SC_Arabic, GC_Lo, NULL}, //  ﻝ..ﻟ
-    {0xFEE1, 0xFEE3, SC_Arabic, GC_Lo, NULL}, //  ﻡ..ﻣ
-    {0xFEE5, 0xFEE7, SC_Arabic, GC_Lo, NULL}, //  ﻥ..ﻧ
-    {0xFEE9, 0xFEEB, SC_Arabic, GC_Lo, NULL}, //  ﻩ..ﻫ
-    {0xFEED, 0xFEF3, SC_Arabic, GC_Lo, NULL}, //  ﻭ..ﻳ
-    {0xFEF5, 0xFEFC, SC_Arabic, GC_Lo, NULL}, //  ﻵ..ﻼ
-    {0x10140, 0x10174, SC_Greek, GC_Nl, NULL}, //  𐅀..𐅴
-    {0x10780, 0x10785, SC_Latin, GC_Lm, NULL}, //  𐞀..𐞅
-    {0x10787, 0x107B0, SC_Latin, GC_Lm, NULL}, //  𐞇..𐞰
-    {0x107B2, 0x107BA, SC_Latin, GC_Lm, NULL}, //  𐞲..𐞺
-    {0x16FE3, 0x16FE3, SC_Han, GC_Lm, NULL}, //  𖿣
-    {0x1AFF0, 0x1AFF3, SC_Katakana, GC_Lm, NULL}, //  𚿰..𚿳
-    {0x1AFF5, 0x1AFFB, SC_Katakana, GC_Lm, NULL}, //  𚿵..𚿻
-    {0x1AFFD, 0x1AFFE, SC_Katakana, GC_Lm, NULL}, //  𚿽..𚿾
-    {0x1B000, 0x1B000, SC_Katakana, GC_Lo, NULL}, //  𛀀
-    {0x1B002, 0x1B11F, SC_Hiragana, GC_Lo, NULL}, //  𛀂..𛄟
+    {0x1B11F, 0x1B11F, SC_Hiragana, GC_Lo, NULL}, //  𛄟
     {0x1B121, 0x1B122, SC_Katakana, GC_Lo, NULL}, //  𛄡..𛄢
     {0x1B150, 0x1B152, SC_Hiragana, GC_Lo, NULL}, //  𛅐..𛅒
     {0x1B164, 0x1B167, SC_Katakana, GC_Lo, NULL}, //  𛅤..𛅧
-    {0x1D400, 0x1D454, SC_Common, GC_L, NULL}, //  𝐀..𝑔
-    {0x1D456, 0x1D49C, SC_Common, GC_L, NULL}, //  𝑖..𝒜
-    {0x1D49E, 0x1D49F, SC_Common, GC_Lu, NULL}, //  𝒞..𝒟
-    {0x1D4A2, 0x1D4A2, SC_Common, GC_Lu, NULL}, //  𝒢
-    {0x1D4A5, 0x1D4A6, SC_Common, GC_Lu, NULL}, //  𝒥..𝒦
-    {0x1D4A9, 0x1D4AC, SC_Common, GC_Lu, NULL}, //  𝒩..𝒬
-    {0x1D4AE, 0x1D4B9, SC_Common, GC_L, NULL}, //  𝒮..𝒹
-    {0x1D4BB, 0x1D4BB, SC_Common, GC_Ll, NULL}, //  𝒻
-    {0x1D4BD, 0x1D4C3, SC_Common, GC_Ll, NULL}, //  𝒽..𝓃
-    {0x1D4C5, 0x1D505, SC_Common, GC_L, NULL}, //  𝓅..𝔅
-    {0x1D507, 0x1D50A, SC_Common, GC_Lu, NULL}, //  𝔇..𝔊
-    {0x1D50D, 0x1D514, SC_Common, GC_Lu, NULL}, //  𝔍..𝔔
-    {0x1D516, 0x1D51C, SC_Common, GC_Lu, NULL}, //  𝔖..𝔜
-    {0x1D51E, 0x1D539, SC_Common, GC_L, NULL}, //  𝔞..𝔹
-    {0x1D53B, 0x1D53E, SC_Common, GC_Lu, NULL}, //  𝔻..𝔾
-    {0x1D540, 0x1D544, SC_Common, GC_Lu, NULL}, //  𝕀..𝕄
-    {0x1D546, 0x1D546, SC_Common, GC_Lu, NULL}, //  𝕆
-    {0x1D54A, 0x1D550, SC_Common, GC_Lu, NULL}, //  𝕊..𝕐
-    {0x1D552, 0x1D6A5, SC_Common, GC_L, NULL}, //  𝕒..𝚥
-    {0x1D6A8, 0x1D6C0, SC_Common, GC_Lu, NULL}, //  𝚨..𝛀
-    {0x1D6C2, 0x1D6DA, SC_Common, GC_Ll, NULL}, //  𝛂..𝛚
-    {0x1D6DC, 0x1D6FA, SC_Common, GC_L, NULL}, //  𝛜..𝛺
-    {0x1D6FC, 0x1D714, SC_Common, GC_Ll, NULL}, //  𝛼..𝜔
-    {0x1D716, 0x1D734, SC_Common, GC_L, NULL}, //  𝜖..𝜴
-    {0x1D736, 0x1D74E, SC_Common, GC_Ll, NULL}, //  𝜶..𝝎
-    {0x1D750, 0x1D76E, SC_Common, GC_L, NULL}, //  𝝐..𝝮
-    {0x1D770, 0x1D788, SC_Common, GC_Ll, NULL}, //  𝝰..𝞈
-    {0x1D78A, 0x1D7A8, SC_Common, GC_L, NULL}, //  𝞊..𝞨
-    {0x1D7AA, 0x1D7C2, SC_Common, GC_Ll, NULL}, //  𝞪..𝟂
-    {0x1D7C4, 0x1D7CB, SC_Common, GC_L, NULL}, //  𝟄..𝟋
     {0x1DF00, 0x1DF1E, SC_Latin, GC_L, NULL}, //  𝼀..𝼞
     {0x1E7E0, 0x1E7E6, SC_Ethiopic, GC_Lo, NULL}, //  𞟠..𞟦
     {0x1E7E8, 0x1E7EB, SC_Ethiopic, GC_Lo, NULL}, //  𞟨..𞟫
     {0x1E7ED, 0x1E7EE, SC_Ethiopic, GC_Lo, NULL}, //  𞟭..𞟮
     {0x1E7F0, 0x1E7FE, SC_Ethiopic, GC_Lo, NULL}, //  𞟰..𞟾
-    {0x1EE00, 0x1EE03, SC_Arabic, GC_Lo, NULL}, //  𞸀..𞸃
-    {0x1EE05, 0x1EE1F, SC_Arabic, GC_Lo, NULL}, //  𞸅..𞸟
-    {0x1EE21, 0x1EE22, SC_Arabic, GC_Lo, NULL}, //  𞸡..𞸢
-    {0x1EE24, 0x1EE24, SC_Arabic, GC_Lo, NULL}, //  𞸤
-    {0x1EE27, 0x1EE27, SC_Arabic, GC_Lo, NULL}, //  𞸧
-    {0x1EE29, 0x1EE32, SC_Arabic, GC_Lo, NULL}, //  𞸩..𞸲
-    {0x1EE34, 0x1EE37, SC_Arabic, GC_Lo, NULL}, //  𞸴..𞸷
-    {0x1EE39, 0x1EE39, SC_Arabic, GC_Lo, NULL}, //  𞸹
-    {0x1EE3B, 0x1EE3B, SC_Arabic, GC_Lo, NULL}, //  𞸻
-    {0x1EE42, 0x1EE42, SC_Arabic, GC_Lo, NULL}, //  𞹂
-    {0x1EE47, 0x1EE47, SC_Arabic, GC_Lo, NULL}, //  𞹇
-    {0x1EE49, 0x1EE49, SC_Arabic, GC_Lo, NULL}, //  𞹉
-    {0x1EE4B, 0x1EE4B, SC_Arabic, GC_Lo, NULL}, //  𞹋
-    {0x1EE4D, 0x1EE4F, SC_Arabic, GC_Lo, NULL}, //  𞹍..𞹏
-    {0x1EE51, 0x1EE52, SC_Arabic, GC_Lo, NULL}, //  𞹑..𞹒
-    {0x1EE54, 0x1EE54, SC_Arabic, GC_Lo, NULL}, //  𞹔
-    {0x1EE57, 0x1EE57, SC_Arabic, GC_Lo, NULL}, //  𞹗
-    {0x1EE59, 0x1EE59, SC_Arabic, GC_Lo, NULL}, //  𞹙
-    {0x1EE5B, 0x1EE5B, SC_Arabic, GC_Lo, NULL}, //  𞹛
-    {0x1EE5D, 0x1EE5D, SC_Arabic, GC_Lo, NULL}, //  𞹝
-    {0x1EE5F, 0x1EE5F, SC_Arabic, GC_Lo, NULL}, //  𞹟
-    {0x1EE61, 0x1EE62, SC_Arabic, GC_Lo, NULL}, //  𞹡..𞹢
-    {0x1EE64, 0x1EE64, SC_Arabic, GC_Lo, NULL}, //  𞹤
-    {0x1EE67, 0x1EE6A, SC_Arabic, GC_Lo, NULL}, //  𞹧..𞹪
-    {0x1EE6C, 0x1EE72, SC_Arabic, GC_Lo, NULL}, //  𞹬..𞹲
-    {0x1EE74, 0x1EE77, SC_Arabic, GC_Lo, NULL}, //  𞹴..𞹷
-    {0x1EE79, 0x1EE7C, SC_Arabic, GC_Lo, NULL}, //  𞹹..𞹼
-    {0x1EE7E, 0x1EE7E, SC_Arabic, GC_Lo, NULL}, //  𞹾
-    {0x1EE80, 0x1EE89, SC_Arabic, GC_Lo, NULL}, //  𞺀..𞺉
-    {0x1EE8B, 0x1EE9B, SC_Arabic, GC_Lo, NULL}, //  𞺋..𞺛
-    {0x1EEA1, 0x1EEA3, SC_Arabic, GC_Lo, NULL}, //  𞺡..𞺣
-    {0x1EEA5, 0x1EEA9, SC_Arabic, GC_Lo, NULL}, //  𞺥..𞺩
-    {0x1EEAB, 0x1EEBB, SC_Arabic, GC_Lo, NULL}, //  𞺫..𞺻
     {0x20000, 0x2A6DF, SC_Han, GC_Lo, NULL}, //  𠀀..𪛟
     {0x2A700, 0x2B738, SC_Han, GC_Lo, NULL}, //  𪜀..𫜸
     {0x2B740, 0x2B81D, SC_Han, GC_Lo, NULL}, //  𫝀..𫠝
@@ -1145,20 +1045,20 @@
     {0x2CEB0, 0x2EBE0, SC_Han, GC_Lo, NULL}, //  𬺰..𮯠
     {0x30000, 0x3134A, SC_Han, GC_Lo, NULL}, //  𰀀..𱍊
 };
-// 355 ranges, 115 singles, 99350 codepoints
+// 243 ranges, 93 singles, 95986 codepoints
 ```
 
-14 Appendix A - C23XID_Continue
+15 Appendix B - C26XID_Continue
 ===============================
 
-Created with mkc23 from libu8ident.
+Created with mkc26 from libu8ident.
 _The SCX is modelled as if your compiler would allow static initialization of
 strings as {char,...,0}._
 
 ``` c
 // Filtering allowed scripts, XID_Continue,!XID_Start, safe IDTypes, NFC,
 // MEDIAL from XID_Start and !MARK. Split on GC and SCX
-const struct sc_c23 safec23_cont_list[75] = {
+const struct sc_c26 safec26_cont_list[75] = {
     {0x30, 0x39, SC_Common, GC_Nd, NULL}, //  0..9
     {0x5F, 0x5F, SC_Common, GC_Pc, NULL}, //  _
     {0xB7, 0xB7, SC_Common, GC_Po, NULL}, //  ·
@@ -1239,7 +1139,7 @@
 // 22 ranges, 53 singles, 200 codepoints
 ```
 
-15 Appendix C - XID_Continue # Lm
+16 Appendix C - XID_Continue # Lm
 =================================
 
 Needed for [TR39#5.4](https://www.unicode.org/reports/tr39/#Optional_Detection)
@@ -1347,7 +1247,7 @@
 1E94B         ; XID_Continue # Lm       ADLAM NASALIZATION MARK
 ```
 
-16 Appendix D - XID_Continue # M
+17 Appendix D - XID_Continue # M
 =================================
 
 Needed for [TR39#5.4](https://www.unicode.org/reports/tr39/#Optional_Detection)
@@ -1960,11 +1860,12 @@
 E0100..E01EF  ; XID_Continue # Mn [240] VARIATION SELECTOR-17..-256
 ```
 
-17 Appendix E - IDType Technical
+18 Appendix E - IDType Technical
 =================================
 
-Needed for **#8 TR39 Identifier Type**. List of Technical ID characters, added
-the TR39 Recommended and Inclusion IDTypes. TR39#Table 1
+Needed for Section 9 [TR39 Identifier Type](#tr39-identifier-type).
+List of Technical ID characters, added to the TR39 Recommended and Inclusion
+IDTypes. TR39#Table 1
 <https://www.unicode.org/reports/tr39/#Identifier_Status_and_Type>
 
     grep ' Technical ' IdentifierType.txt |
@@ -2128,17 +2029,17 @@
                                         MUSICAL SYMBOL COMBINING SNAP PIZZICATO
 ```
 
-18 Appendix F - Greek Confusables
+19 Appendix F - Greek Confusables
 =================================
 
-Needed for exclusion in the **TR39 Mixed Scripts** Greek rule. Where-ever we
-have a Greek letter confusable with Latin, and we already saw Latin, forbid
-the Greek letter in favor of the Latin letter. See TR39
-[confusables.txt](https://www.unicode.org/Public/security/latest/confusables.txt).
-Note that these confusables cannot be excluded upfront in the TR31 identifier parsing,
-as Greek alone is allowed.
+Needed for exclusion in the [9 TR39 Mixed Scripts](#tr39-mixed-scripts) Greek
+rule.  Where-ever we have a Greek letter confusable with Latin, and we already
+saw Latin, forbid the Greek letter in favor of the Latin letter. See TR39
+[confusables](https://www.unicode.org/Public/security/latest/confusables.txt).
+Note that these confusables cannot be excluded upfront in the TR31
+identifier parsing, as Greek alone is allowed.
 
-18.1 Exceptions
+19.1 Exceptions
 ----------------
 
 Allow these 10 Greek letters and symbols to be confusable with Latin:
@@ -2158,7 +2059,7 @@
 03F4 ; ( ϴ → O̵ ) GREEK CAPITAL THETA SYMBOL → LATIN CAPITAL LETTER O, ...
 ```
 
-18.2 Confusables
+19.2 Confusables
 ----------------
 
 List of the Greek-Latin confusables: (Note: these include the exceptions above)
@@ -2247,7 +2148,7 @@
 03C9 ; ( ꞷ → ω ) LATIN SMALL LETTER OMEGA → GREEK SMALL LETTER OMEGA
 ```
 
-19 References
+20 References
 =============
 
 * [AltId] Unicode Standard Annex.
