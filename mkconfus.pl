#!/usr/bin/env perl -s
# libu8ident - Check unicode security guidelines for identifiers.
# Copyright 2014, 2021, 2022 Reini Urban
# SPDX-License-Identifier: Apache-2.0
#
# Create confus.h from https://www.unicode.org/Public/security/latest/confusables.txt
# with mkconfus.pl -c.
# perf needs mkconfus.pl without -c to generate all headers.
#
# Note that the first array is just a binary-search in an unoptimized,
# uncompressed array, without any values.  It might be smaller and
# faster with gperf or cbitset/croaring.

use vars qw($c);
use strict;
use Config;
use utf8;
use Encode ();
use B 'cstring';
use Unicode::Normalize;

my $confus = "confusables.txt";
for ($confus) {
  if (!-e $_) {
    system("wget -N https://www.unicode.org/Public/security/latest/$_");
  }
}

# fixup wrong pairs. these are not really confusable
my %confbugs = map { $_ => 1 } qw(0022 0025 0030 0031 0049 006D 007C
				  0251 028B 028F
				  03BD 03C3 03D1 03F1 03F4
				  0561 0570 0575 0584);
my (@CONF, @ucd_version, $started);
open my $CONF, "<", $confus or die "$confus $!";
while (<$CONF>) {
  if (!$started) {
    if (/^# Version: (\d+)\.(\d)\.(\d)/) { @ucd_version = ($1,$2,$3); }
    if (/^# For documentation and/) { $started++; }
    next unless $started;
  } else {
    if (/^([0-9A-F]{4,5}) ;\t([0-9A-F]{4,5}) ;/) {
      my ($from, $to1) = (hex($1), hex($2));
      push @CONF, [$from, $to1];
    }
    elsif (/^([0-9A-F]{4,5}) ;\t([0-9A-F]{4,5} [0-9A-F]{4,5} );\t/) {
      my ($from, $ids) = (hex($1), $2);
      my @ids = map{ hex $_ } split(' ',$ids);
      push @CONF, [$from, @ids];
    }
    elsif (/^([0-9A-F]{4,5}) ;\t([0-9A-F]{4,5} [0-9A-F]{4,5} [0-9A-F]{4,5} );\t/) {
      my ($from, $ids) = (hex($1), $2);
      my @ids = map{ hex $_ } split(' ',$ids);
      push @CONF, [$from, @ids];
    }
    elsif (/^([0-9A-F]{4,5}) ;\t([0-9A-F]{4,5} [0-9A-F]{4,5} [0-9A-F]{4,5} [0-9A-F]{4,5} );\t/) {
      my ($from, $ids) = (hex($1), $2);
      my @ids = map{ hex $_ } split(' ',$ids);
      push @CONF, [$from, @ids];
    }
    if (exists $confbugs{$1}) {
      $CONF[$#CONF] = [ @{$CONF[$#CONF]}, "//" ];
    }
  }
}
close $CONF;
@CONF = sort {$a->[0] <=> $b->[0]} @CONF;
printf "%u confusables\n", scalar @CONF;

my $ofile1 = "confus.h";
chmod 0644, $ofile1 if -e $ofile1;
open my $H1, ">:utf8", $ofile1 or die "writing $ofile1 $!";
print $H1 <<"EOF";
/* ex: set ro ft=c: -*- mode: c; buffer-read-only: t -*- */
/* libu8ident - Check unicode security guidelines for identifiers.
   Copyright 2021 Reini Urban
   SPDX-License-Identifier: Apache-2.0

   Generated by mkconfus.pl, do not modify.
   UNICODE version $ucd_version[0].$ucd_version[1]
*/
#include <stdint.h>

/* Sorted set of all confusables without mapping,
   from https://www.unicode.org/Public/security/latest/confusables.txt
   Some confusables are outcommented.
 */
#ifndef EXTERN_SCRIPTS
const uint32_t confusables[] = {
    // clang-format off
EOF

my $ofile = "gconfus.h.in";
chmod 0644, $ofile if -e $ofile;
open my $H, ">:utf8", $ofile or die "writing $ofile $!";
print $H <<"EOF";
%{/* ex: set ro ft=c: -*- mode: c; buffer-read-only: t -*- */
/* libu8ident - Check unicode security guidelines for identifiers.
   Copyright 2014, 2021, 2022 Reini Urban
   SPDX-License-Identifier: Apache-2.0

   generated by mkconfus.pl, do not modify.
   UNICODE version $ucd_version[0].$ucd_version[1]
*/

#include <string.h>
#include "u8id_private.h"

// v3.1 changed len type from unsigned int to size_t (gperf d519d1a821511eaa22eae6d9019a548aea21e6)
#ifdef GPERF_VERSION
#  if GPERF_VERSION < 301
#    define SIZE_TYPE unsigned int
#  else
#    define SIZE_TYPE size_t
#  endif
#else
#  define SIZE_TYPE size_t
#endif

/* FIXME gperf to accept uint32_t keys.
   key is "%05X" of the unicode codepoint, fixed length 5.
   u8nfc is the rhs of confusables, already decomposed into NFC and encoded as UTF-8.
   Some confusables are outcommented.
 */
%}
%7bit
%language=ANSI-C
%struct-type
%readonly-tables
%null-strings

struct confus_gperf { const char *const name; const char *const u8nfc; };

%%
EOF
my $i = 0;
my $enc = Encode::find_encoding("UTF-8");
for my $c (@CONF) {
  if (@$c == 2) {
    printf $H "#-- %s -> %s\n", chr $c->[0], chr $c->[1];
    printf $H1 "    0x%04X,\t/* %s -> %s */\n", $c->[0], chr $c->[0], chr $c->[1];
    printf $H "%05X,\t%s\n", $c->[0], B::cstring NFC(chr $c->[1]);
    $i++;
  } else {
    my $f = shift @$c;
    my $j = @$c - 1;
    if ($c->[$j] eq "//") {
      printf $H1 "//";
      pop @$c;
      printf $H "#-- %s -> %s\n", chr $f, join('', map {chr $_} @$c);
      printf $H "# ";
    } else {
      printf $H "#-- %s -> %s\n", chr $f, join('', map {chr $_} @$c);
      $i++;
    }
    printf $H1 "    0x%04X,\t/* %s -> ", $f, chr $f;
    printf $H "%05X,\t", $f;
    my $nfd = "";
    for (@$c) {
      printf $H1 "%s", chr $_;
      $nfd .= NFC(chr $_);
    }
    printf $H1 " */\n";
    printf $H "%s\n", B::cstring $nfd;
  }
}

print $H <<'EOF';
%%

/*
 * Local variables:
 *   c-file-style: "gnu"
 * End:
 * vim: expandtab shiftwidth=4 cinoptions='\:2=2' :
 */
EOF
close $H;
chmod 0444, $ofile;

print $H1 <<"EOF";
    // clang-format on
};
#else
extern const uint32_t confusables[$i];
#endif
EOF
close $H1;
chmod 0444, $ofile1;

print "Create serialized roaring bitmaps:\n";
my $arg = $c ? "confus" : "";
if ($^O =~ /Win32/) {
  system($Config{cc}." mkroar.c -I. -o mkroar.exe");
  if ($c) {
    system("mkroar.exe", $arg);
  } else {
    system("mkroar.exe");
  }
  # ignore vms for now
} else {
  system($Config{cc}." mkroar.c -I. -o mkroar");
  if ($c) {
    system("./mkroar", $arg);
  } else {
    system("./mkroar");
  }
}
print "\n";
# allowed not optimized. stayed with 816 array
# confus optimized from 8552 byte to 4731 byte (3 run-length encoded containers)
# NFD_N, NFC_N, NFC_M, NFKD_N, NFKC_N, NFKC_M
my @list = $c ? qw(confus)
              : qw(allowed confus nfd_n nfc_n nfc_m nfkd_n nfkc_n nfkc_m);
for my $name (@list) {
  my $c = $name . "_croar";
  my $b = $c;
  if ($name =~ /(nfk?[cd])_./) {
    $b = $1 . "_croar";
  }
  if ($name =~ /^nfk?c_m/) {
    system("xxd -i $c.bin >> $b.h");
    unlink "$c.bin";
  } else {
    open my $F, '>', "$b.h";
    print $F "/* generated via mkroar.c */\n";
    close $F;
    system("xxd -i $c.bin >> $b.h");
    unlink "$c.bin";
    print "Created $b.h\n";
  }
}
