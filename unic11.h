/* libu8ident - Check unicode security guidelines for identifiers.
   Copyright 2021 Reini Urban
   SPDX-License-Identifier: Apache-2.0

   generated by hand from
   http://www.open-std.org/jtc1/sc22/wg14/www/docs/n2731.pdf

   N2731 Annex D (normative) (starting with C11 N1570)
   Universal character names for identifiers
   This clause lists the hexadecimal code values that are valid in universal
   character names in identifiers.

   D.1 Ranges of characters allowed

   00A8, 00AA, 00AD, 00AF, 00B2–00B5, 00B7–00BA, 00BC–00BE, 00C0–00D6,
   00D8–00F6, 00F8–00FF 0100–167F, 1681–180D, 180F–1FFF 200B–200D, 202A–202E,
   203F–2040, 2054, 2060–206F 2070–218F, 2460–24FF, 2776–2793, 2C00–2DFF,
   2E80–2FFF 3004–3007, 3021–302F, 3031–303F 3040–D7FF F900–FD3D, FD40–FDCF,
   FDF0–FE44, FE47–FFFD 10000–1FFFD, 20000–2FFFD, 30000–3FFFD, 40000–4FFFD,
   50000–5FFFD, 60000–6FFFD, 70000– 7FFFD, 80000–8FFFD, 90000–9FFFD,
   A0000–AFFFD, B0000–BFFFD, C0000–CFFFD, D0000–DFFFD, E0000–EFFFD

   D.2 Ranges of characters disallowed initially

   0300–036F, 1DC0–1DFF, 20D0–20FF, FE20–FE2F
*/

#ifdef EXT_SCRIPTS
extern const struct sc c11_start_list[53];
extern const struct sc c11_cont_list[6];
#else
const struct range_bool c11_start_list[] = {
    {'_', '_'},         {'a', 'z'},         {'A', 'Z'},
    {'$', '$'},         {0x00A8, 0x00A8},   {0x00AA, 0x00AA},
    {0x00AD, 0x00AD},   {0x00AF, 0x00AF},   {0x00B2, 0x00B5},
    {0x00B7, 0x00BA},   {0x00BC, 0x00BE},   {0x00C0, 0x00D6},
    {0x00D8, 0x00F6},   {0x00F8, 0x00FF},   {0x0100, 0x02FF},
    {0x0370, 0x167F},   {0x1681, 0x180D},   {0x180F, 0x1DBF},
    {0x1E00, 0x1FFF},   {0x200B, 0x200D},   {0x202A, 0x202E},
    {0x203F, 0x2040},   {0x2054, 0x2054},   {0x2060, 0x206F},
    {0x2070, 0x20CF},   {0x2100, 0x218F},   {0x2460, 0x24FF},
    {0x2776, 0x2793},   {0x2C00, 0x2DFF},   {0x2E80, 0x2FFF},
    {0x3004, 0x3007},   {0x3021, 0x302F},   {0x3031, 0x303F},
    {0x3040, 0xD7FF},   {0xF900, 0xFD3D},   {0xFD40, 0xFDCF},
    {0xFDF0, 0xFE1F},   {0xFE30, 0xFE44},   {0xFE47, 0xFFFD},
    {0x10000, 0x1FFFD}, {0x20000, 0x2FFFD}, {0x30000, 0x3FFFD},
    {0x40000, 0x4FFFD}, {0x50000, 0x5FFFD}, {0x60000, 0x6FFFD},
    {0x70000, 0x7FFFD}, {0x80000, 0x8FFFD}, {0x90000, 0x9FFFD},
    {0xA0000, 0xAFFFD}, {0xB0000, 0xBFFFD}, {0xC0000, 0xCFFFD},
    {0xD0000, 0xDFFFD}, {0xE0000, 0xEFFFD},
};

// plus these as cont (so Combining marks are allowed)
const struct range_bool c11_cont_list[] = {
    {'0', '9'},       {'$', '$'},       {0x0300, 0x036F},
    {0x1DC0, 0x1DFF}, {0x20D0, 0x20FF}, {0xFE20, 0xFE2F},
};
#endif
